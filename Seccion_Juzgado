#include <iostream>
#include <thread>
#include <chrono>
#include <cstdlib>
#define NOMINMAX
#include <windows.h>
#include <string>
#include <conio.h>
#include <vector>
using namespace std;
vector<string> dividirTexto(const string& texto, size_t anchoMax) {
    vector<string> lineas;
    size_t inicio = 0;

    while (inicio < texto.size()) {
        size_t fin = min(inicio + anchoMax, texto.size());
        if (fin < texto.size() && texto[fin] != ' ') {
            size_t ultimoEspacio = texto.rfind(' ', fin);
            if (ultimoEspacio != string::npos && ultimoEspacio > inicio)
                fin = ultimoEspacio;
        }
        lineas.push_back(texto.substr(inicio, fin - inicio));
        inicio = texto.find_first_not_of(' ', fin);
        if (inicio == string::npos) break;
    }
    return lineas;
}
const int ancho = 53;
const int alto = 18;
vector<string> quiz(string opcion1, string opcion2, string opcion3) {
    return {
        "1. " + opcion1,
        "",
        "2. " + opcion2,
        "",
        "3. " + opcion3
    };
}
string sprite3[] = {
    "..................................................",
    "..................:=+**##%%*-:....................",
    "................**#%%*###%%#*-....................",
    "...............=%%*-:-+#%*=##*....................",
    "................+%#%+\\=*/=**#%%...................",
    "..................%%#=--=*==*%%...................",
    ".................%%@%%=-=+=++#%%%%................",
    "................%%%%%%%#+++++##%%%%######%*.......",
    ".............##########%%%%#==########%%%#%%......",
    "............##**##**+*=-=*+*########%%%%%##%......",
    "...........*+####%%%%%%##%%##%#####%%%%%%%%%%.....",
    "..........**#####%%%%%%%%%%%##%##%%%%%%%%%%%%%%...",
    ".........++###%#:-=#***%######%%%%%%%%%%%%%%%%%...",
    ".......+*##%%:=++==+=%%%%%%%%%%%%%%#....####%%%...",
    "......+######=:+++=+#%%%%%%%%%%%%%####.%%%%%%%#...",
    "......#####%#=-+*%%%%%%%%%%%%%%%%%####%.%%%%*+....",
};
string sprite1[] = {
    "..................................................",
    "...........=*#%%%%##+-............................",
    "...........:+%%##+==-+:....................--=====",
    ".............+*+===+=-................:==--==++--:",
    ".............-====++=:............-=*##+======++=:",
    ".............--==+**--==-:.:--=+####%%%*===+=::...",
    "...........-+=--+%%%%%%%######%%%%%%%%%%#+%*......",
    ".......:=*%%*+=*%%%%%%%%%%%%%%%%%%%%%#*+=-:.......",
    "......=%%%%#**#%%%%%%%%%%%%%%%%%%#+=:.............",
    ".....:#%%%%##%%%%%%%%%%%%%%#*=-:..................",
    "....:*%%%%%%%%%%%%%%%%%%%+:.......................",
    "....+%%%%%%%%%%%%%%%%%%#-.........................",
    "...=%%%%%%@%%%%%%%%%%##+..........................",
    "..:#%%%@%%%%%%%%%%%%%#*=..........................",
    ".:+%%%%%%%%%%%%%%%%%##+...........................",
    ".=%%%%#%%%%%%%%%%%%%##+...........................",
};
string sprite2[] = {
    "........................:.........................",
    "........................:%%%%%#=..................",
    ".........................#=*=-:+..................",
    ".......................=#==-:-:...................",
    "..................%%%%%%#-==::....................",
    ".................%%###%%%:=+:###-.................",
    "...............%%%##%####.#.#####:................",
    "..............%%%##%######*+###%##................",
    ".............%%%%#%%%#########%%%#*...............",
    "............%%%%#%%%%%%%%%###-.#%%#*..............",
    "...........%%%%.*%%%%########...#%%#*.............",
    "..........%%%%...%%%%%##%####....#%###............",
    ".....:+++%%%%++=-%%%%%%%%##%#.....*%###-..........",
    ".....:%%#########*****++++++++===-:*%###+.........",
    ".....:###################%%#######*****+++======-.",
    ".....:###################%%#######*****+++======-."
};

void setCursorPosition(int x, int y) {
    COORD coord = { (SHORT)x, (SHORT)y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void Cuadro_frame(int ancho, int alto, char bordeHorizontal) {
    cout << "+";
    for (int i = 0; i < ancho - 2; ++i) cout << bordeHorizontal;
    cout << "+\n";
    for (int i = 0; i < alto - 2; ++i) {
        cout << "|";
        for (int j = 0; j < ancho - 2; ++j) cout << " ";
        cout << "|\n";
    }
    cout << "+";
    for (int i = 0; i < ancho - 2; ++i) cout << bordeHorizontal;
    cout << "+\n";
}

void dibujarSprite(int x, int y, const string sprite[], int filas, int maxAncho) {
    for (int i = 0; i < filas; ++i) {
        setCursorPosition(x, y + i);
        cout << sprite[i].substr(0, maxAncho);
    }
}

void textoprogresivo(const string& texto) {
    int duracion = 50;
    for (char c : texto) {
        cout << c << flush;
        if (c != ' ') {
            Beep(600, duracion);
        }
        else {
            this_thread::sleep_for(chrono::milliseconds(duracion));
        }
    }
    cout << endl;
}
void Dialogo(const string& texto) {
    vector<string> lineas = dividirTexto(texto, 50);

    for (const string& linea : lineas) {
        textoprogresivo(linea);
    }
}

void esperarenter() {
    cout << "\nPresiona Enter para continuar...";
    string dummy;
    getline(cin, dummy);
}
void dialogo_escena(const string sprite[], const string& texto) {
    system("cls");
    Cuadro_frame(ancho, alto, '-');
    dibujarSprite(1, 1, sprite, 16, ancho - 2);
    cout << "\n\n";
    Dialogo(texto);
}
int dialogo_trivia(const string sprite[], int seed, string opcion1, string opcion2, string opcion3, int respuesta) {
    system("cls");
    Cuadro_frame(ancho, alto, '-');
    dibujarSprite(1, 1, sprite, 16, ancho - 2);
    int a = 0;
    cout << "\n\n";

    // Crear las opciones a partir de los argumentos
    vector<string> opciones = {
        "1. " + opcion1,
        "",
        "2. " + opcion2,
        "",
        "3. " + opcion3
    };

    // Mostrar opciones
    for (int j = 0; j < opciones.size(); ++j) {
        setCursorPosition(4, 18 + j);
        cout << opciones[j];
    }

    int seleccion = 0;
    int total = 3;
    int y_inicio = 18;
    while (true) {
        // Borrar flechas anteriores
        for (int j = 0; j < total; ++j) {
            setCursorPosition(2, y_inicio + j * 2);
            cout << "   ";
        }

        // Flecha actual
        setCursorPosition(2, y_inicio + seleccion * 2);
        cout << "-->";

        int tecla = _getch();
        if (tecla == 0 || tecla == 224) {
            tecla = _getch();
            if (tecla == 72) {
                seleccion = (seleccion - 1 + total) % total;
            }
            else if (tecla == 80) {
                seleccion = (seleccion + 1) % total;
            }
        }
        else if (tecla == 13) {
            setCursorPosition(4, y_inicio + total * 2 + 1);
            if (seleccion == respuesta) {
                a = 1;
            }
            break;
        }
    }
    return a;
}


int main() {
    dialogo_escena(sprite2, "Mi es totalmente inocente no deberia siquiera estar aqui");
    esperarenter();
    dialogo_escena(sprite1, "Ademas quien no a matado a una persona en su vida, digo que deberian desestimar este caso");
    esperarenter();
    dialogo_escena(sprite3, "Inaceptable, El tipo si estuvo involucrado en el caso");
    esperarenter();

    int correcto = dialogo_trivia(
        sprite3,
        5,
        "quien es el acusado?",
        "Segun los derechos constitucionales, este caso deberia de ser desestimado?",
        "que hay para comer?",
        1
    );

    if (correcto) {
        dialogo_escena(sprite3, "Muy bien, parece que estas prestando atencion.");
    }
    else {
        dialogo_escena(sprite3, "Eso no es correcto... Seguro que estabas escuchando?");
    }

    esperarenter();
    return 0;
}
